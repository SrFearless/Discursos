"use client"

import { useState, useEffect } from "react"
import { usePathname } from "next/navigation"
import { Button } from "@/components/ui/button"

interface ActionItem {
  label: string
  modalTitle: string
  modalMessage: string
  href: string
  modalImages: string[] // Agora √© obrigat√≥rio
}

export default function AcademicWorks() {
  const pathname = usePathname()
  const [isVisible, setIsVisible] = useState(true)
  const [showConfirmModal, setShowConfirmModal] = useState(false)
  const [showImageModal, setShowImageModal] = useState(false)
  const [selectedItem, setSelectedItem] = useState<ActionItem | null>(null)
  const [currentImageIndex, setCurrentImageIndex] = useState(0)

  useEffect(() => {
    setIsVisible(!pathname.includes("/configuracoes"))
  }, [pathname])

  if (!isVisible) return null

  const actions: ActionItem[] = [
    {
        label: "Fim de Semana",
        modalTitle: "Ilimitado",
        modalMessage:
          `Convido os irm√£os a se sentarem que dentro de 1 minuto come√ßaremos a reuni√£o. 
_____________________________ 


Sejam todos bem-vindos a mais uma reuni√£o de fim de semana das testemunhas de jeov√°, gostaria de pedir para colocarem seus dispositivos eletr√¥nicos no modo ‚Äúsilencioso‚Äù ou no ‚Äún√£o perturbe‚Äù 

 

√â sempre um prazer e uma alegria ter todos aqui reunidos para nos encorajarmos e aproveitar as provis√µes que o nosso bom Deus nos d√°. 

 

Hoje teremos um discurso p√∫blico e o estudo da revista ‚ÄúA Sentinela‚Äù. 

 

E para come√ßarmos eu convido os irm√£os que podem se levantar, para entoarmos um c√¢ntico de louvor a Jeov√°. 

 

Que √© o de: 

N√∫mero: 

Tema: 

Baseado no Texto: 



Ap√≥s a melodia todos cantemos. 
_____________________________ 


Muito bem, agora teremos um discurso p√∫blico com o seguinte tema se desejarem anotar: 



Tema: 

Orador: 

Congrega√ß√£o: 



No qual passamos a Tribuna. 
_____________________________


Primeiramente gostar√≠amos de agradecer a Deus por essa provis√£o amorosa e ao nosso irm√£o () que treinou, se esfor√ßou e se deslocou de sua congrega√ß√£o para nos proporcionar esse excelente discurso. 

 

E Fica meu convite tamb√©m para a pr√≥xima reuni√£o de fim de semana que vai ter outro discurso, com outras instru√ß√µes para n√≥s. 

 

Agora convido os irm√£os para ficar mais 1 hora conosco onde iremos passar para o Estudo da ‚ÄúA Sentinela‚Äù no qual nosso irm√£o (Isaias) vai dirigir `,
        href: "",
        modalImages: [
          "/images/semimagem.gif"
        ]
      },
  ]
  const actions1: ActionItem[] = [
      {
        label: "Apresenta√ß√£o sobre as Guerras",
        modalTitle: "7 Minutos",
        modalMessage:
          `
Bom dia a todos, parabens aos irm√£os por apoiar a sa√≠da de campo. 

Hoje para a nossa considera√ß√£o, eu quero dar uma sugest√£o encima desse folheto com o tema: Quem Controla o Mundo? 

Porque na atual situa√ß√£o do mundo est√° acontecendo muitas guerras, tivemos o epis√≥dio da R√∫ssia e Ucr√¢nia agora Israel e ir√£, e n√≥s tamb√©m vemos que muitas casas foram afetadas, pessoas acabaram perdendo a vida e muitas pessoas pode acabar se perguntando do porqu√™ ‚ÄúDeus deixa tudo isso acontecer?‚Äù 

Vamos ver um Texto que n√≥s podemos apresentar ao morador? Que est√° logo abrindo o folheto: 1 Jo√£o 5:19 quem pode ajudar na leitura? 

(Sabemos que nos originamos de Deus, mas o mundo inteiro est√° no poder¬†do¬†Maligno.)

Como podemos aplicar esses texto conversando com o Morador?

N√≥s podemos pensar, ser√° que se Deus estivesse governando o mundo ele estaria nessa situa√ß√£o? afinal sabemos que Jeov√° √© um Deus de amor`,
        href: "",
        modalImages: [
          "/images/semimagem.gif"
        ]
      },
      {
        label: "Apresenta√ß√£o sobre Ficar Pac√≠fico",
        modalTitle: "7 Minutos",
        modalMessage:
          `Bom dia a todos, parabens aos irm√£os por apoiar a sa√≠da de campo. 

Hoje para a nossa considera√ß√£o eu quero come√ßar lendo um texto, que √© o de (Romanos 12:17-20) Quem poderia nos ajudar com a Leitura?

17 - N√£o retribuam a ningu√©m mal com mal. Preocupem-se com o que √© bom aos olhos de todas as pessoas. 18 - Se poss√≠vel, no que depender de voc√™s, sejam pac√≠ficos com todos. 19 - N√£o se vinguem, amados, mas deem lugar √† ira; pois est√° escrito: ‚ÄúA vingan√ßa √© minha; eu retribuirei, diz Jeov√°.‚Äù 20 - Mas, ‚Äúse o seu inimigo estiver com fome, d√™-lhe algo para comer; se ele estiver com sede, d√™-lhe algo para beber; pois, fazendo isso, voc√™ amontoar√° brasas vivas sobre a cabe√ßa dele‚Äù

Como podemos aplicar esses textos conversando com o Morador?

Podemos pensar como o exemplo de um ferreiro que precisa colocar o ferro em brasas ardentes para amolecer ele.

E quando n√≥s respondemos a Ira com Paz essa pessoa vai ficar pensando sobre isso, e como vemos ali no paragrafo 20 "amontoar√° brasas vivas sobre a cabe√ßa dele"`,
        href: "",
        modalImages: [
          "/images/semimagem.gif"
        ]
      },
  ]
  const actions2: ActionItem[] = [
    {
        label: "J√≥ias Espirituais",
        modalTitle: "10 Minutos",
        modalMessage:
        `Bom, Ent√£o irm√£os para come√ßar as J√≥ias quem pode nos ajudar a ler o texto de (Texto da Semana)

        Obrigado pela leitura, agora vamos a pergunta relacionada a esse texto (Pergunta da Semana)

        Isso mesmo, a segunda pergunta √© (Que joias espirituais voc√™ encontrou na leitura da B√≠blia desta Semana?)

        (Coment√°rios)

        Obrigado pelos excelentes coment√°rios, agora prosseguimos a reuni√£o com o Presidente
`,
        href: "",
        modalImages: [
          "/images/semimagem.gif"
        ]
      },
  ]
  const actions3: ActionItem[] = [
    {
        label: "Vazio",
        modalTitle: "15 Minutos",
        modalMessage:
          `...`,
        href: "",
        modalImages: [
          "/images/semimagem.gif"
        ]
      },
  ]




  function handleOpen(item: ActionItem) {
    setSelectedItem(item)
    setShowConfirmModal(true)
    setCurrentImageIndex(0)
  }

  function handleCancel() {
    setShowConfirmModal(false)
    setSelectedItem(null)
  }

  function handleConfirm() {
    setShowConfirmModal(false)
    setShowImageModal(true)
  }

  function handleCloseImage() {
    setShowImageModal(false)
    setSelectedItem(null)
    setCurrentImageIndex(0)
  }

  function nextImage() {
    if (!selectedItem?.modalImages) return
    setCurrentImageIndex((prevIndex) => 
      prevIndex === selectedItem.modalImages.length - 1 ? 0 : prevIndex + 1
    )
  }

  function prevImage() {
    if (!selectedItem?.modalImages) return
    setCurrentImageIndex((prevIndex) => 
      prevIndex === 0 ? selectedItem.modalImages.length - 1 : prevIndex - 1
    )
  }

  return (
    <div className="min-h-screen bg-stone-900 bg-cover bg-fixed">
      {/* Banner superior */}
      <div className="bg-black/70 border-b-4 border-amber-800 py-4 shadow-lg">
        <h1 className="text-3xl md:text-4xl font-pixel text-center text-amber-400 tracking-wider">
          üìú Designa√ß√µes
        </h1>
        <p className="text-center text-amber-200 mt-2 font-pixel text-sm">
          Partes como Sa√≠da de Campo, Tesouros da Palavra de Deus, Fa√ßa seu Melhor no Minist√©rio e Nossa Vida Crist√£
        </p>
      </div>

      {/* Lista de trabalhos em uma √∫nica coluna */}
      <div className="container mx-auto px-4 py-12 max-w-3xl">
      <div className="px-4 py-12 font-pixel text-purple-500 border-l-2 border-amber-500 text-[25px]">
            Presidencia
        </div>
        <div className="space-y-8">
          {actions.map((action, idx) => (
            <div
              key={action.label + idx}
              className="relative group transform hover:scale-[1.02] transition-transform duration-300 cursor-pointer"
              onClick={() => handleOpen(action)}
            >
              {/* Moldura decorativa */}
              <div className="absolute inset-0 border-4 border-amber-700 rounded-lg pointer-events-none"></div>
              <div className="absolute inset-1 border-2 border-amber-500/50 rounded pointer-events-none"></div>
              
              {/* Carta de trabalho */}
              <div className="relative w-full min-h-32 rounded bg-stone-800 overflow-hidden shadow-lg p-6">
                {/* Conte√∫do */}
                <div className="flex flex-col h-full">
                  <div className="flex-grow">
                    <h3 className="text-xl font-pixel text-amber-200">
                      {action.label}
                    </h3>
                    <p className="text-amber-100 mt-2 text-sm line-clamp-3">
                      {action.modalMessage.substring(0, 150)}...
                    </p>
                  </div>
                  
                  {/* Rodap√© */}
                  <div className="mt-4 flex justify-between items-center">
                    <div className="bg-amber-700 text-amber-100 font-pixel text-xs px-2 py-1 rounded-full">
                      {action.modalTitle.includes("Ilimitado") ? "Ilimitado" :
                       action.modalTitle.includes("7 Minutos") ? "7 Minutos" :
                       action.modalTitle.includes("10 Minutos") ? "10 Minutos" :
                       action.modalTitle.includes("15 Minutos") ? "15 Minutos" :
                       action.modalTitle.includes("30 Minutos") ? "30 Minutos" : "Vazio"}                   
                    </div>
                    <span className="text-amber-300 text-sm font-pixel">
                      Clique para ver detalhes
                    </span>
                  </div>
                </div>
              </div>
              </div>
          ))}
        </div>
        <div className="px-4 py-12 font-pixel text-purple-500 border-l-2 border-amber-500 text-[25px]">
            Saida de Campo
        </div>
        <div className="space-y-8">
          {actions1.map((action, idx) => (
            <div
              key={action.label + idx}
              className="relative group transform hover:scale-[1.02] transition-transform duration-300 cursor-pointer"
              onClick={() => handleOpen(action)}
            >
              {/* Moldura decorativa */}
              <div className="absolute inset-0 border-4 border-amber-700 rounded-lg pointer-events-none"></div>
              <div className="absolute inset-1 border-2 border-amber-500/50 rounded pointer-events-none"></div>
              
              {/* Carta de trabalho */}
              <div className="relative w-full min-h-32 rounded bg-stone-800 overflow-hidden shadow-lg p-6">
                {/* Conte√∫do */}
                <div className="flex flex-col h-full">
                  <div className="flex-grow">
                    <h3 className="text-xl font-pixel text-amber-200">
                      {action.label}
                    </h3>
                    <p className="text-amber-100 mt-2 text-sm line-clamp-3">
                      {action.modalMessage.substring(0, 150)}...
                    </p>
                  </div>
                  
                  {/* Rodap√© */}
                  <div className="mt-4 flex justify-between items-center">
                    <div className="bg-amber-700 text-amber-100 font-pixel text-xs px-2 py-1 rounded-full">
                    {action.modalTitle.includes("Ilimitado") ? "Ilimitado" :
                       action.modalTitle.includes("7 Minutos") ? "7 Minutos" :
                       action.modalTitle.includes("10 Minutos") ? "10 Minutos" :
                       action.modalTitle.includes("15 Minutos") ? "15 Minutos" :
                       action.modalTitle.includes("30 Minutos") ? "30 Minutos" : "Vazio"}                    
                    </div>
                    <span className="text-amber-300 text-sm font-pixel">
                      Clique para ver detalhes
                    </span>
                  </div>
                </div>
              </div>
              </div>
          ))}
        </div>
        <div className="px-4 py-12 font-pixel text-purple-500 border-l-2 border-amber-500 text-[25px]">
            J√≥ias
        </div>
        <div className="space-y-8">
          {actions2.map((action, idx) => (
            <div
              key={action.label + idx}
              className="relative group transform hover:scale-[1.02] transition-transform duration-300 cursor-pointer"
              onClick={() => handleOpen(action)}
            >
              {/* Moldura decorativa */}
              <div className="absolute inset-0 border-4 border-amber-700 rounded-lg pointer-events-none"></div>
              <div className="absolute inset-1 border-2 border-amber-500/50 rounded pointer-events-none"></div>
              
              {/* Carta de trabalho */}
              <div className="relative w-full min-h-32 rounded bg-stone-800 overflow-hidden shadow-lg p-6">
                {/* Conte√∫do */}
                <div className="flex flex-col h-full">
                  <div className="flex-grow">
                    <h3 className="text-xl font-pixel text-amber-200">
                      {action.label}
                    </h3>
                    <p className="text-amber-100 mt-2 text-sm line-clamp-3">
                      {action.modalMessage.substring(0, 150)}...
                    </p>
                  </div>
                  
                  {/* Rodap√© */}
                  <div className="mt-4 flex justify-between items-center">
                    <div className="bg-amber-700 text-amber-100 font-pixel text-xs px-2 py-1 rounded-full">
                    {action.modalTitle.includes("Ilimitado") ? "Ilimitado" :
                       action.modalTitle.includes("7 Minutos") ? "7 Minutos" :
                       action.modalTitle.includes("10 Minutos") ? "10 Minutos" :
                       action.modalTitle.includes("15 Minutos") ? "15 Minutos" :
                       action.modalTitle.includes("30 Minutos") ? "30 Minutos" : "Vazio"}                   
                    </div>
                    <span className="text-amber-300 text-sm font-pixel">
                      Clique para ver detalhes
                    </span>
                  </div>
                </div>
              </div>
              </div>
          ))}
        </div>
        <div className="px-4 py-12 font-pixel text-purple-500 border-l-2 border-amber-500 text-[25px]">
            Necessidades Locais
        </div>
        <div className="space-y-8">
          {actions3.map((action, idx) => (
            <div
              key={action.label + idx}
              className="relative group transform hover:scale-[1.02] transition-transform duration-300 cursor-pointer"
              onClick={() => handleOpen(action)}
            >
              {/* Moldura decorativa */}
              <div className="absolute inset-0 border-4 border-amber-700 rounded-lg pointer-events-none"></div>
              <div className="absolute inset-1 border-2 border-amber-500/50 rounded pointer-events-none"></div>
              
              {/* Carta de trabalho */}
              <div className="relative w-full min-h-32 rounded bg-stone-800 overflow-hidden shadow-lg p-6">
                {/* Conte√∫do */}
                <div className="flex flex-col h-full">
                  <div className="flex-grow">
                    <h3 className="text-xl font-pixel text-amber-200">
                      {action.label}
                    </h3>
                    <p className="text-amber-100 mt-2 text-sm line-clamp-3">
                      {action.modalMessage.substring(0, 150)}...
                    </p>
                  </div>
                  
                  {/* Rodap√© */}
                  <div className="mt-4 flex justify-between items-center">
                    <div className="bg-amber-700 text-amber-100 font-pixel text-xs px-2 py-1 rounded-full">
                    {action.modalTitle.includes("Ilimitado") ? "Ilimitado" :
                       action.modalTitle.includes("7 Minutos") ? "7 Minutos" :
                       action.modalTitle.includes("10 Minutos") ? "10 Minutos" :
                       action.modalTitle.includes("15 Minutos") ? "15 Minutos" :
                       action.modalTitle.includes("30 Minutos") ? "30 Minutos" : "Vazio"}                    
                    </div>
                    <span className="text-amber-300 text-sm font-pixel">
                      Clique para ver detalhes
                    </span>
                  </div>
                </div>
              </div>
              </div>
          ))}
        </div>
      </div>

      {/* Modal de descri√ß√£o */}
      {showConfirmModal && selectedItem && (
  <div className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center p-4">
    <div className="bg-stone-800 border-4 border-amber-700 rounded-lg p-6 max-w-3xl w-full max-h-[90vh] overflow-auto shadow-xl">
      <div className="border-b border-amber-600 pb-3 mb-4">
        <h2 className="text-2xl font-pixel text-amber-300 text-center">
          {selectedItem.modalTitle}
        </h2>
        <p className="text-amber-200 text-center font-pixel mt-1">
          {selectedItem.label}
        </p>
      </div>
      
      <div className="bg-stone-700/80 border border-amber-900 p-4 rounded mb-6">
        <div className="text-amber-100 text-sm whitespace-pre-wrap">
          {selectedItem.modalMessage}
        </div>
      </div>
      
      <div className="flex justify-center space-x-4">
        <Button 
          onClick={handleCancel}
          className="font-pixel bg-stone-700 hover:bg-stone-600 text-amber-300 border border-amber-700"
        >
          Voltar
        </Button>
        {selectedItem.modalImages.length > 0 && (
          <Button 
            onClick={handleConfirm}
            className="font-pixel bg-amber-700 hover:bg-amber-600 text-stone-100"
          >
            Ver Imagens ({selectedItem.modalImages.length})
          </Button>
        )}
      </div>
    </div>
  </div>
)}

      {/* Modal de carrossel */}
      {showImageModal && selectedItem && (
        <div className="fixed inset-0 bg-black/90 z-50 flex items-center justify-center p-4">
          <div className="bg-stone-800 border-4 border-amber-700 rounded-lg overflow-hidden shadow-2xl max-w-5xl w-full">
            <div className="bg-stone-900 border-b border-amber-800 p-3">
              <h3 className="text-xl font-pixel text-amber-300 text-center">
                {selectedItem.label} - Imagens ({currentImageIndex + 1}/{selectedItem.modalImages.length})
              </h3>
            </div>
            
            <div className="relative p-4 bg-black flex justify-center items-center max-h-[70vh] overflow-auto">
              <button 
                onClick={prevImage}
                className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-stone-800/80 hover:bg-stone-700/90 text-amber-300 p-2 rounded-full z-10"
              >
                &lt;
              </button>
              
              <img 
                src={selectedItem.modalImages[currentImageIndex]} 
                alt={`${selectedItem.label} - Imagem ${currentImageIndex + 1}`}
                className="max-w-full max-h-[65vh] object-contain"
              />
              
              <button 
                onClick={nextImage}
                className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-stone-800/80 hover:bg-stone-700/90 text-amber-300 p-2 rounded-full z-10"
              >
                &gt;
              </button>
            </div>
            
            <div className="bg-stone-900 border-t border-amber-800 p-3 flex justify-center space-x-2">
              {selectedItem.modalImages.map((_, index) => (
                <button
                  key={index}
                  onClick={() => setCurrentImageIndex(index)}
                  className={`w-3 h-3 rounded-full ${currentImageIndex === index ? 'bg-amber-500' : 'bg-stone-600'}`}
                  aria-label={`Ir para imagem ${index + 1}`}
                />
              ))}
            </div>
            
            <div className="bg-stone-900 border-t border-amber-800 p-3 flex justify-center">
              <Button 
                onClick={handleCloseImage}
                className="font-pixel bg-amber-700 hover:bg-amber-600 text-stone-100"
              >
                Fechar
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}